version: 2.1

orbs:
  snyk: snyk/snyk@2.0.0

executors:
  node-executor:
    docker:
      - image: cimg/node:18.20
    environment:
      AWS_REGION: us-east-1

jobs:
  snyk_scan:
    executor: node-executor
    steps:
      - checkout

      - run:
          name: Install Python, pip, jq, and unzip
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip jq unzip

      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install --update
            rm -rf awscliv2.zip aws
            aws --version

      - run:
          name: Assume AWS OIDC Role
          command: |
            ROLE_ARN="arn:aws:iam::961341535277:role/newcircleci"
            if [ -z "$CIRCLE_OIDC_TOKEN" ]; then
              echo "OIDC token not found! Did you attach the correct Context with OIDC enabled?" && exit 1
            fi
            OIDC_TOKEN="$CIRCLE_OIDC_TOKEN"
            CREDS_JSON=$(aws sts assume-role-with-web-identity \
              --role-arn "$ROLE_ARN" \
              --role-session-name "newcircleci" \
              --web-identity-token "$OIDC_TOKEN" \
              --region $AWS_REGION)
            export AWS_ACCESS_KEY_ID=$(echo "$CREDS_JSON" | jq -r '.Credentials.AccessKeyId')
            export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_JSON" | jq -r '.Credentials.SecretAccessKey')
            export AWS_SESSION_TOKEN=$(echo "$CREDS_JSON" | jq -r '.Credentials.SessionToken')
            echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN" >> $BASH_ENV

      - run:
          name: Install Python dependencies
          command: |
            if [ -f requirements.txt ]; then
              pip3 install -r requirements.txt
            fi

      - run:
          name: Fetch snyk API token from Secrets Manager
          command: |
            SECRET_JSON=$(aws secretsmanager get-secret-value \
              --region $AWS_REGION \
              --secret-id newcircleci/snyk/api-token \
              --query SecretString \
              --output text)
            SNYK_TOKEN=$(echo $SECRET_JSON | jq -r '."newcircleci/snyk/api-token"')
            echo "export SNYK_TOKEN=$SNYK_TOKEN" >> $BASH_ENV

      - run:
          name: Install Snyk CLI (official static binary)
          command: |
            curl -fL -o snyk "https://static.snyk.io/cli/latest/snyk-linux"
            sudo mv snyk /usr/local/bin/snyk
            sudo chmod +x /usr/local/bin/snyk
            which snyk
            snyk --version


      - run:
          name: Dependency scan (requirements.txt) and upload to Snyk (monitor)
          command: |
            source $BASH_ENV
            if [ -f requirements.txt ]; then
              # Run test (this returns non-zero if issues found)
              snyk test --file=requirements.txt --severity-threshold=low
              TEST_EXIT=$?
              # Always upload monitor results
              snyk monitor --file=requirements.txt

              # Optional: fail the job if issues found (set to 1 to fail)
              FAIL_ON_ISSUES=1
              if [ "$FAIL_ON_ISSUES" -eq 1 ] && [ "$TEST_EXIT" -ne 0 ]; then
                echo "Vulnerabilities found by snyk test (requirements.txt) — failing build."
                exit $TEST_EXIT
              fi
            else
              echo "No requirements.txt found — skipping dependency scan."
            fi

      - run:
          name: Code scan (Snyk Code) and upload
          command: |
            source $BASH_ENV
            # Run Snyk Code test across repo
            snyk code test --severity-threshold=low
            CODE_EXIT=$?
            snyk code monitor
            # Optional: fail on code issues too
            FAIL_ON_CODE_ISSUES=0
            if [ "$FAIL_ON_CODE_ISSUES" -eq 1 ] && [ "$CODE_EXIT" -ne 0 ]; then
              echo "Snyk Code found issues — failing build."
              exit $CODE_EXIT
            fi

workflows:
  snyk_security_scan:
    jobs:
      - snyk_scan
